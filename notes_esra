The shell then parses these tokens into commands and other constructs,
removes the special meaning of certain words or characters,
expands others, redirects input and output as needed,
executes the specified command, waits for the command’s exit
status, and makes that exit status available for further inspection or processing.

HOW DOES THE SHELL WORK IN STEPS
3.1.1 Shell Operation
The following is a brief description of the shell’s operation when it reads and executes a command. Basically, the shell does the following:

1Reads its input from a file (see Shell Scripts), from a string supplied as an argument to the -c invocation option (see Invoking Bash), or from the user’s terminal.
2Breaks the input into words and operators, obeying the quoting rules described in Quoting. These tokens are separated by metacharacters. Alias expansion is performed by this step (see Aliases).
3Parses the tokens into simple and compound commands (see Shell Commands).
4Performs the various shell expansions (see Shell Expansions), breaking the expanded tokens into lists of filenames (see Filename Expansion) and commands and arguments.
5Performs any necessary redirections (see Redirections) and removes the redirection operators and their operands from the argument list.
6Executes the command (see Executing Commands).
7Optionally waits for the command to complete and collects its exit status (see Exit Status).


QUOTING!!!
Enclosing characters in single quotes (‘'’) preserves the literal value of each character within the quotes.
A single quote may not occur between single quotes,

Enclosing characters in double quotes (‘"’) preserves the literal value of all
characters within the quotes, with the exception of ‘$’, ‘`’, ‘\’, and, when history expansion is enabled, ‘!’.

----> Daraus folgt das Problem mit dem echo '$test' -> Dollar wird nicht interpretiert, weil ' alle unterdruckt
echo "$test" funktioniert aber, weil " nicht alles unterdruckt

Pipelines>
Each command in a pipeline is executed in its own subshell, which is a separate process

The exit status of a pipeline is the exit status of the last command in the pipeline -> WIRD GESPEICHERT IM FRAGEZEICHEN (?)

Wichtig:
ech hello | grep hello (1. command kaputt, 2. geht) -> $? = 1
echo hello | gre hello (1. command geht, 2. kaputt) -> $? = 127
ech hello | gre hello (beide kaputt) -> $? = 127

Variablen
$$ muss nicht gehandelt werden

Exit Status fur commands
nicht gefunden 127
gefunden aber nicht ausfuhrbar 126

exti | exit -> beides Childs, exited nicht "

bash-3.2$ << e'n'd cat
> $USER
> end
$USER


Sspecial cases um Leute zu argern:
cat hello >| test Muss eigentlich funktionieren; outputted einfach in file
<> input und output in einem definieren

bash-3.2$ export d="echo     |hallo"
bash-3.2$ echo $d
echo |hallo